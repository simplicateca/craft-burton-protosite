{## Core Image Template
{---------------------------------------------------------------------------------------}
    Extending from an empty {% block %} makes it easier to keep things organized in here.
{-------------------------------------------------------------------------------------##}
{%- extends "_burton/base/partial" -%}


{## Template Variables
{-------------------------------------------------------------------------------------##}
{%- set images = images ?? image ?? null -%}


{## Default Configuration
{-------------------------------------------------------------------------------------##}
{%- block img__class      imgclass     ?? "w-full max-w-full h-auto" -%}
{%- block picture__tag    picturetag   ?? "picture" -%}
{%- block picture__class  pictureclass ?? "" -%}
{%- block figure__tag     figuretag    ?? "figure" -%}
{%- block figure__class   figureclass  ?? "relative z-20" -%}
{%- block caption__tag    captiontag   ?? "figcaption" -%}
{%- block caption__class  captionclass ?? "text-sm" -%}

{%- block img__tag imgtag ?? _self.imgtag( images, {
    imgclass : block('img__class'),
    transform: transform ??? null,
} ) -%}

{%- block action _self.action( click ??? null, images ) -%}


{## Render HTML
{---------------------------------------------------------------------------------------}
    Used to generate the html structure surrounding an image (figure, caption, etc).
{-------------------------------------------------------------------------------------##}
{%- block output -%}
    {{- tag( block('figure__tag'), {
        class: block('figure__class'),
        html : block('figure')
    }) -}}
{%- endblock -%}

{%- block figure raw( block('picture') ~ block('caption') ~ block('action') ) -%}

{%- block picture tag( block('picture__tag'), {
    class: block('picture__class'),
    html : block('img__tag') ~ block('srcset')
} ) -%}

{%- block caption tag( 'figcaption', {
    class: "text-sm",
    html : _self.captionText( caption ??? null, images ) | retconChange( 'p', false )
} ) -%}

{% block srcset "" -%}


{%- macro image( images ) -%}
    {%- set params = {
        images: images ?? null,
        imgclass: "w-full max-w-full h-auto rounded-none",
        _placeholder: 'default',
    } | merge( varargs, true ) -%}

    {%- set path = ["_burton/local/image", "_burton/theme/image", "_burton/base/image"] -%}
    {{- include( path, params, withContext = false ) -}}
{%- endmacro -%}



{## Widescreen / Video Aspect Frame (with Transform)
{-------------------------------------------------------------------------------------##}
{%- macro image__widescreen( images ) -%}
    {%- set params = {
        transform: {
            mode: 'crop',
            width: 960,
            height: 540,
            position: 'center-center'
        },
        figureclass: "relative z-20 w-full bg-theme-tint flex items-center justify-center aspect-video overflow-hidden",
        imgclass: "h-full object-contain"
    } | merge( varargs, true) -%}

    {{- _self.image( images, ...params ) -}}
{%- endmacro -%}


{## Image with Caption
{-------------------------------------------------------------------------------------##}
{%- macro image__caption( images, settings ) -%}
    {{ _self.default( images, {
        caption: true,
        captionclass: "py-3 border-b-4 border-theme-tint",
    } | merge( settings ?? {} ) ) }}
{%- endmacro -%}


{## Float Right
{-------------------------------------------------------------------------------------##}
{%- macro image__floatright( images ) -%}
    {%- set params = {
        figureclass: "relative z-20 float-right w-1/4 max-w-1/4",
        imgclass: "w-full h-auto translate-x-2"
    } | merge( varargs, true) -%}

    {{- _self.image( images, ...params ) -}}
{%- endmacro -%}



{## Square Frame (with Transform)
{-------------------------------------------------------------------------------------##}
{%- macro image__square( images ) -%}
    {%- import "_burton" as b -%}
    {{- b.image( images, ...{
        transform: {
            mode: 'crop',
            width: 960,
            height: 960,
            position: 'center-center'
        }
    } | merge(varargs)) -}}
{%- endmacro %}


{## Caption Output
{-------------------------------------------------------------------------------------##}
{%- macro captionText( caption, images ) -%}
    {%- set caption = caption ??? null %}
    {%- set image = collect(images).first() -%}
    {{- caption is same as(true)
        ? image.headline ??? image.title ??? image.alt ??? null
        : "" -}}
{%- endmacro -%}


{## Image Action
{---------------------------------------------------------------------------------------}
    Generates the action for an image (lightbox, download, etc).
{-------------------------------------------------------------------------------------##}
{%- macro action( action, images ) -%}
    {# {%- switch action ?? 'none' -%}
        {%- case 'lightbox' -%}
            {{- _self.action__lightbox( images, settings ) -}}
        {%- case 'download' -%}
            {{- _self.action__download( images, settings ) -}}
        {%- case 'none' -%}

        {%- default -%}
            {{- _self.action__autolink( images, settings ) -}}
    {%- endswitch -%} #}
{%- endmacro -%}


{# {%- macro action__autolink( image, settings ) -%}
    {%- if settings.autolink ??? null -%}
        {{ tag( 'a', {
            href : settings.autolink,
            class: 'click-cover',
            html : "<span class='sr-only'></span>",
        } ) }}
    {%- endif -%}
{%- endmacro %}


{%- macro action__download( image, settings ) -%}
    {%- if image.url ??? null -%}
        {{ tag( 'a', {
            href : image.url,
            download: image.filename,
            target: '_blank',
            class: 'click-cover',
            html : "<span class='sr-only'>Download #{image.alt ?? 'Image'}</span>",
        } ) }}
    {%- endif -%}
{%- endmacro %} #}



{## Lightbox Modal
{---------------------------------------------------------------------------------------}
    Creates a modal window that will load on-click to show a larger version of the image.
{-------------------------------------------------------------------------------------##}
{# {%- macro action__lightbox( image, settings ) -%}
    {%- set image = image ??? null -%}
    {%- set settings = settings ?? null is iterable ? settings : {} -%}

    {%- set lightbox = settings.lightbox ??? ["_burton/local/modal", "_burton/theme/modal", "_burton/base/modal"] -%}
    {%- set content  = _self.imgtag( image, { imgclass: 'w-auto max-h-[70vh] mx-auto' } ) -%}

    {{ include( lightbox, { content: content, settings: settings }, with_context = false ) }}
{%- endmacro %} #}



{## <img> tag generator
{---------------------------------------------------------------------------------------}
    Generates a basic <img> tag for a variety of image sources. Also capable of
    generating multiple formats of placeholder images for wireframing and development.

    Valid formats for `imageinput` include:

  - A string containing a URL
  - An object with a `getUrl()` method (like a Craft `Asset` object)
  - An object with a `url` property (like a manually created Twig variable)
  - An array or ElementQuery containing any of any of the above.

    The `frame` object can be used to pass additional classes or transforms to the
    image tag. The following keys are accepted:

  - `frame.imgclass`  : Additional classes to apply to the <img> tag
  - `frame.transform` : The named Asset Transform or custom transform hash.
                        TODO: test if this actually allows inline transform hashes.

  -> https://craftcms.com/docs/5.x/development/image-transforms.html
{-------------------------------------------------------------------------------------##}
{%- macro imgtag( imageinput, frame = null ) -%}

    {%- set imageinput = imageinput ?? null -%}

    {## your instinct might tell you to use a conditional statement here to skip the
        tag generation if we don't have any input, and maybe that's fine for production,
        but in development that would mean skipping placeholder generation. So....    ##}

    {%- set frame = frame ?? null is iterable ? frame : {} -%}
    {%- set frame = { imgclass: null, transform: null } | merge( frame ) -%}

    {## Only one image is allowed, so grab the first one we can find
    {---------------------------------------------------------------------------------##}
    {%- set image = null -%}

    {# an array of images (manual or eager loaded) OR an AssetQuery object. same same. #}
    {%- if image is null and ( imageinput[0] ??? null or imageinput.one() ??? null ) -%}

        {# passed an array of image urls strings? #}
        {%- set image = ( imageinput[0] ??? null) and (imageinput[0] is not iterable)
            ? { url: imageinput | first }
            : imageinput | first -%}
    {%- endif -%}

    {%- if image is null and imageinput ??? null and imageinput is not iterable -%}
        {%- set image = { url: imageinput } -%}
    {%- endif -%}

    {%- if image is null and imageinput.url ??? null -%}
        {%- set image = imageinput -%}
    {%- endif -%}

    {## Placeholder Image (no image found/provided)
    {-----------------------------------------------------------------------------------}
        If no image is found, we can generate a placeholder image to help with the
        layout. Disabled by default in `staging` and `production` environments, but very
        useful during wireframing and development.
    {---------------------------------------------------------------------------------##}
    {{- ( image is null ) ? _self.placeholder( frame ) -}}

    {## Local Assets
    {-----------------------------------------------------------------------------------}
        Handle the transform (if any) and generate that tag.
    {---------------------------------------------------------------------------------##}
    {%- if image ??? null and image.id ??? null -%}

        {% if frame.transform ??? null %}
            {{- tag( 'img', {
                src    : image.getUrl( frame.transform ),
                alt    : image.alt ?? image.title ?? '',
                width  : image.getWidth( frame.transform ),
                height : image.getHeight( frame.transform ),
                class  : frame.imgclass,
                loading: 'lazy'
            }) -}}
        {% else %}
            {{- tag( 'img', {
                src    : image.url ?? '',
                alt    : image.alt ?? image.title ?? '',
                width  : image.width,
                height : image.height,
                class  : frame.imgclass,
                loading: 'lazy'
            }) -}}
        {% endif %}

    {## External Image / URL String
    {-----------------------------------------------------------------------------------}
        Can't transform remote images, so just output them in the desired frame.

        Could queue them to be downloaded and turn them into local assets if we
        *really* wanted / needed to.
    {---------------------------------------------------------------------------------##}
    {%- elseif image is not null -%}

        {%- set show = ( image.url starts with '//' or image.url|lower starts with 'http' ) -%}
        {{- show ? tag( 'img', {
            src    : image.url,
            alt    : image.alt ?? '',
            class  : frame.imgclass,
            loading: 'lazy'
        }) -}}

    {%- endif -%}
{%- endmacro %}





{## Placeholder Image Generator(s)
{---------------------------------------------------------------------------------------}
    Automatically disabled in `staging` and `production` environments.
{-------------------------------------------------------------------------------------##}
{%- macro placeholder( settings ) -%}
{%- if getenv('CRAFT_ENVIRONMENT') == 'dev' -%}

    {%- set settings  = settings ?? null is iterable ? settings : {} -%}
    {%- set transform = settings.transform ??? null -%}

    {%- set width  = transform.width  ??? 1024 -%}
    {%- set height = transform.height ??? 740 -%}

    {%- set type = settings._placeholder ??? 'default' -%}
    {%- set type = ( type == 'default' and transform and transform is not iterable ) ? transform : type -%}

    {%- set width  = type == 'widescreen' ? 1024 : width  -%}
    {%- set height = type == 'widescreen' ? 576  : height -%}

    {%- set width  = type == 'square'     ? 1024 : width  -%}
    {%- set height = type == 'square'     ? 1024 : height -%}

    {%- set width  = type == 'skull'      ? 240  : width  -%}
    {%- set height = type == 'skull'      ? 240  : height -%}

    {%- set color = settings.color ??? '#475569' -%}
    {%- set color = color|replace({'#':''})   -%}

    {## Try to use the same image in the same places, by creating a unique seed.
        Optionally distort it (blur/grayscale) to help identify it as a placeholder. ##}
    {%- set seed   = [width, height, settings.slug ??? null, settings.loop.index ??? null] | filter | join('__') -%}
    {%- set source = "https://picsum.photos/seed/#{seed}/#{width}/#{height}" -%}
    {%- set source = source ~ "?grayscale&blur=4"-%}

    {# Use a different service for 'square' images #}
    {%- set source = ( type == 'skull' )
        ? "https://placeskull.com/#{width}/#{height}/#{color}/#{random(1,24)}"
        : source %}

    {# Use SVG files for icon placeholders #}
    {% if type == 'icon' %}
        {%- set svgs = ["helicopter","pie","map-location","syringe","user-doctor","arrow-down-short-wide","sack-dollar","rectangle-vertical","flag-pennant","mars-and-venus","honey-pot","vacuum-robot","tornado","cross","money-check","hand","fire","presentation-screen","person-skiing","face-icicles","wallet","dna","crutch","upload","face-laugh-beam","user-shakespeare","suitcase","mask-face","memo","grid-4","universal-access","cherries","sausage","court-sport","soft-serve","yin-yang","alien","escalator","citrus","pegasus","voicemail","layer-group","language","face-flushed","watch-smart","copy","trademark","face-anguished","fork","skull"] %}
        {{ svg( '@appicons/' ~ shuffle(svgs)|first ~'.svg')
            | attr({ class: false })
            | attr({ class: 'fill-current h-20 w-20 mx-auto' }) }}

    {# Otherwise render placeholder <img> #}
    {% else %}
        {{- tag( 'img', {
            src: source,
            alt: "Placeholder #{type|capitalize}",
            class: [ settings.imgclass ?? null, "placeholder__#{type}" ] | filter,
        } ) -}}
    {% endif %}
{%- endif %}{%- endmacro -%}